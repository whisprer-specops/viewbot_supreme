import base64
import os
from cryptography.fernet import Fernet

class SecureEncryptionManager:
    """
    A more secure and usable encryption manager that properly handles keys.
    """
    
    def __init__(self, key=None):
        """
        Initialize with an existing key or generate a new one.
        
        Args:
            key: Optional base64-encoded Fernet key to use
        """
        if key:
            # Use the provided key
            self.key = key
        else:
            # Generate a new key
            self.key = Fernet.generate_key()
            
        # Create the cipher
        self.cipher = Fernet(self.key)
    
    def encrypt(self, message):
        """
        Encrypt a message.
        
        Args:
            message: Text to encrypt
            
        Returns:
            str: Encrypted message (base64-encoded)
        """
        if isinstance(message, str):
            message = message.encode()
        return self.cipher.encrypt(message).decode()
    
    def decrypt(self, encrypted_message):
        """
        Decrypt an encrypted message.
        
        Args:
            encrypted_message: Encrypted message to decrypt
            
        Returns:
            str: Decrypted message
        """
        if isinstance(encrypted_message, str):
            encrypted_message = encrypted_message.encode()
        return self.cipher.decrypt(encrypted_message).decode()
    
    def get_key_string(self):
        """
        Get the key as a base64 string for storage.
        
        Returns:
            str: Base64-encoded key
        """
        return self.key.decode() if isinstance(self.key, bytes) else self.key

# Example usage
def encryption_demo():
    # Create a new encryption manager with a fresh key
    manager = SecureEncryptionManager()
    print(f"Generated key: {manager.get_key_string()}")
    
    # Encrypt a message
    webhook_url = "https://discord.com/api/webhooks/1234567890/abcdefghijklmnopqrstuvwxyz"
    encrypted = manager.encrypt(webhook_url)
    print(f"Encrypted: {encrypted}")
    
    # To decrypt later, you MUST use the same key
    key = manager.get_key_string()
    
    # In a real application, you would store this key securely
    # For example, in an environment variable or a secure key vault
    print(f"IMPORTANT: Save this key to decrypt later: {key}")
    
    # Later, when you want to decrypt:
    decryptor = SecureEncryptionManager(key=key)
    decrypted = decryptor.decrypt(encrypted)
    print(f"Decrypted: {decrypted}")
    
    # Trying to decrypt with a different key will fail
    try:
        wrong_key = Fernet.generate_key()
        wrong_decryptor = SecureEncryptionManager(key=wrong_key)
        wrong_decryptor.decrypt(encrypted)
    except Exception as e:
        print(f"As expected, decryption with wrong key failed: {e}")

if __name__ == "__main__":
    encryption_demo()